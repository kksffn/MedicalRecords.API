// <auto-generated />
using System;
using MedicalRecords.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MedicalRecords.API.Migrations
{
    [DbContext(typeof(MedicalRecordsContext))]
    [Migration("20210520195555_Added_IsInactive_field")]
    partial class Added_IsInactive_field
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MedicalRecords.Domain.Entities.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<bool>("IsInactive")
                        .HasColumnType("bit");

                    b.Property<string>("PatientName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientSurname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(9)
                        .HasColumnType("nchar(9)")
                        .IsFixedLength(true);

                    b.HasKey("Id");

                    b.ToTable("Patients", "MedicalRecords");
                });

            modelBuilder.Entity("MedicalRecords.Domain.Entities.PatientRiskFactor", b =>
                {
                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("RiskFactorId")
                        .HasColumnType("int");

                    b.HasKey("PatientId", "RiskFactorId");

                    b.HasIndex("RiskFactorId");

                    b.ToTable("PatientRiskFactors", "MedicalRecords");
                });

            modelBuilder.Entity("MedicalRecords.Domain.Entities.RiskFactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Factor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RiskFactors", "MedicalRecords");
                });

            modelBuilder.Entity("MedicalRecords.Domain.Entities.PatientRiskFactor", b =>
                {
                    b.HasOne("MedicalRecords.Domain.Entities.Patient", "Patient")
                        .WithMany("PatientRiskFactors")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalRecords.Domain.Entities.RiskFactor", "RiskFactor")
                        .WithMany("PatientRiskFactors")
                        .HasForeignKey("RiskFactorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("RiskFactor");
                });

            modelBuilder.Entity("MedicalRecords.Domain.Entities.Patient", b =>
                {
                    b.Navigation("PatientRiskFactors");
                });

            modelBuilder.Entity("MedicalRecords.Domain.Entities.RiskFactor", b =>
                {
                    b.Navigation("PatientRiskFactors");
                });
#pragma warning restore 612, 618
        }
    }
}
